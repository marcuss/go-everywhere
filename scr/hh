name: Build and Deploy to Amazon ECR

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # allows creation of an OIDC token
      contents: read

    steps:
      - name: Set ENV Variables
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::246386308913:role/eks-federated-deployer
          role-session-name: eks-deployer-temporal-session
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create ECR Repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY }} --region ${{ secrets.AWS_REGION }} || aws ecr create-repository --repository-name ${{ secrets.ECR_REPOSITORY }} --region ${{ secrets.AWS_REGION }}

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build, tag, and push image to Amazon ECR
        run: |
          IMAGE_TAG=latest
          REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}

          # Build the Docker image
          docker build -t $REPOSITORY_URI:$IMAGE_TAG .

          # Push the image to Amazon ECR
          docker push $REPOSITORY_URI:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write # allows creation of an OIDC token
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::246386308913:role/eks-federated-deployer
          role-session-name: eks-deployer-temporal-session
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create kube-config directory
        run: mkdir -p $HOME/.kube

      - name: Decode and set kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
        shell: bash

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version

      - name: Validate AWS Configuration
        run: |
          which aws
          aws --version
          aws sts get-caller-identity

      - name: Replace environment variables in Kubernetes manifest
        run: |
          export AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          export AWS_REGION=${{ secrets.AWS_REGION }}
          export ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}
          envsubst < k8s/deployment.yaml | tee k8s/deployment-resolved.yaml

      - name: Deploy to EKS
        run: kubectl apply --validate=false -f k8s/deployment-resolved.yaml --namespace=dev

      - name: Check Installation
        run: |
          # Check pods related to deployment
          kubectl get pods -l app=marco-nico-app --namespace=dev

          # Describe the deployment in detail
          kubectl describe deployment marco-nico-deployment --namespace=dev

      - name: Check Pod Status
        run: |
          echo "Waiting for pods to be in running state..."
          kubectl get pods -l app=marco-nico-app
          kubectl wait --for=condition=Ready pod -l app=marco-nico-app --timeout=120s