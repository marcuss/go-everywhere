name: Build and Push to ECR Steps

on:
  workflow_call:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # allows creation of an OIDC token
      contents: read

    steps:
      - name: Set ENV Variables
        run: echo "Setting ENV variables"
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::246386308913:role/eks-federated-deployer
          role-session-name: eks-deployer-temporal-session
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create ECR Repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY }} --region ${{ secrets.AWS_REGION }} || aws ecr create-repository --repository-name ${{ secrets.ECR_REPOSITORY }} --region ${{ secrets.AWS_REGION }}

      - name: Set up Docker Build|
        uses: docker/setup-buildx-action@v3

      - name: Log in to Amazon ECR
        id: login-ecr # <-- This is the job ID `build`
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} # <-- This takes from the outputs of login-ecr the variable registry
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # Push the image to Amazon ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Output Image URI for downstream jobs
        id: image-details
        run: echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" # <-- This export the variable build.outputs.image see at the start of the job

    outputs:
      image: ${{ steps.image-details.outputs.image }}